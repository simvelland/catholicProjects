public class Sandbox {
    
    private CharStack oStack;
    private static String input;
    private PostfixArray postfix = new PostfixArray();
    private DoubleStack calcStack;
    private String holder = "";


    public Sandbox(String s) {
        
        input = s;
        System.out.println(input);
    }

    public PostfixArray convert() {

        oStack = new CharStack(25);

        for (int i = 0; i < input.length();) {

            holder = "";

            for(int j = i; j < input.length(); j++) {

                char a = input.charAt(j);
                
                if (a != ' ' && (Character.isDigit(a) || a == '.')) {
                    
                    holder += a;
                    System.out.println(holder);
                    i++;
                }
                else if (a == '*' || a == '+' || a == '-' || a == '/' || a == '(' || a == ')' || a == '%' || a == '^') {

                    if (oStack.isEmpty()) {

                        if (postfix.isEmpty() && holder == "") {

                            oStack.push(a);
                        }

                        else if (holder == "") {

                            oStack.push(a);
                        }
                        else {

                            postfix.insert(holder);
                            oStack.push(a);
                        }
                        
                    }
                    else {

                        if (holder != "") {
                            postfix.insert(holder);
                        }
                    
                        switch (a) {

                            case '(':
                                oStack.push(a);
                                break;

                            case ')':
                                do {
                                    if (oStack.peek() != 40) {

                                        postfix.insert(String.valueOf(oStack.pop()));
                                    }
                                } while (oStack.peek() != 40);

                                oStack.pop();
                                break;

                            case '^':
                                do {
                                    if (oStack.peek() == 94) {

                                        postfix.insert(String.valueOf(oStack.pop()));
                                    }
                                    else {
                                        oStack.push(a);
                                        break;
                                    }
                                } while (oStack.peek() != 40 && oStack.size() > 0);
                                break;

                            case '*':
                            case '/':
                            case '%':
                                do {

                                    if (oStack.peek() == 47 || oStack.peek() == 42 || oStack.peek() == 37 || oStack.peek() == 94) {

                                        postfix.insert(String.valueOf(oStack.pop()));
                                    }
                                    else {
                                        oStack.push(a);
                                        break;
                                    }
                                }
                                while (oStack.size() > 0 && (oStack.peek() != 40));
                                if (oStack.size() == 0 || oStack.peek() == 40) {

                                    oStack.push(a);
                                }
                                break;

                            default:
                                do {
                                    if (oStack.peek() != 40) {
                                        
                                        postfix.insert(String.valueOf(oStack.pop()));
                                    }
                                    else {
                                        break;
                                    }
                                } while (oStack.size() > 0);

                                oStack.push(a);
                        }
                    }

                    i++;
                    break;
                }
                else {
                    
                    System.out.println("Invalid input. Program terminated.");
                    System.exit(0);
                }
                
            }

        }

        System.out.println(input.charAt(input.length() - 1));
        System.out.println(holder);
        if (holder != "" && (input.charAt(input.length() - 1) != ')')) {
            postfix.insert(holder);
            postfix.displayPostfix();
            System.out.println();
        }

        for(int i = oStack.size(); i > 0; i--) {
                    
            System.out.println(oStack.peek());
            postfix.insert(String.valueOf(oStack.pop()));
            postfix.displayPostfix();
            System.out.println();
            System.out.println(i);
        }
        return postfix;
    }

    public double doParse()
    {
        calcStack = new DoubleStack(20);
        String current = "";
        double num1, num2, cDE = 0, ans = 0;
        boolean isDouble;
        
        try {

        for(int j=0; j<postfix.getPostfixLength(); j++)
        {
            current = postfix.getElementAt(j);
            calcStack.displayStack(""+current+" ");
            
            try {
                
                cDE = Double.parseDouble(current);
                isDouble = true;
            } catch (NumberFormatException e) {
                
                isDouble = false;
            }
            
            if (isDouble) {
                
                calcStack.push(cDE);
            }
            else {

               num1= calcStack.pop();
               num2 = calcStack.pop();
               
               switch (current) {

                case "*":
                            ans = num2 * num1;
                            break;
                case "+":
                            ans = num2 + num1;
                            break;
                case "-":
                            ans = num2 - num1;
                            break;
                case "/":
                            ans = num2 / num1;
                            break;
                case "%":
                            ans = num2 % num1;
                            break;
                case "^":
                            ans = Math.pow(num2, num1);
                            break;

               }

               calcStack.push(ans);
            }

           
        }
        } catch (ArrayIndexOutOfBoundsException e) {

            System.out.println("Invalid Input. Program exited");
            System.exit(0);
        }
        postfix.displayPostfix();
        System.out.println();
        ans = calcStack.pop();
        
        if (calcStack.size() > 0) {

            System.out.println("Invalid Input. Program exited");
            System.exit(0);
        }

        return ans;
    }
        
}
