import java.io.*;

public class App {
    public static void main(String[] args) throws IOException {
        String input;
        int output;
        while(true)
        {
            System.out.print("Enter infix expression: ");
            System.out.flush();
            input = getString(); // read a string from kbd
            if( input.equals("") ) // quit if [Enter]
                break;
            // make a parser
            ParsePost aParser = new ParsePost(input);

            output = aParser.doParse(); // do the evaluation
            System.out.println("Evaluates to " + output);
        } 
    }
    //--------------------------------------------------------------
    public static String getString() throws IOException
    {
        InputStreamReader isr = new InputStreamReader(System.in);
        BufferedReader br = new BufferedReader(isr);
        String s = br.readLine();
        return s;
    }
    //--------------------------------------------------------------
}

//END CLASS
------------------------------------------------------------------------------------------------------------------------------------------

public class ParsePost {
    
    private IntStack calcStack;
    private CharStack oStack;
    private static String input;
    private static String postfix = "";
    //--------------------------------------------------------------
    public ParsePost(String s) {
        
        input = s;
        System.out.println(input);
    
    }

    public String translate(String s) {

        oStack = new CharStack(25);

        try {

        for(int i = 0; i < s.length(); i++) {

            System.out.println(s.length());
            char current = s.charAt(i);
            System.out.println(current);


            if (Character.isDigit(current)) {

                postfix = postfix + current;
                System.out.println(postfix);
            }
            else if (current == '*' || current == '+' || current == '-' || current == '/' || current == '(' || current == ')') {

                char c;

                if (oStack.isEmpty()) {

                    oStack.push(current);
                }
                else {
                    
                    switch (current) {

                        case '(':
                                oStack.push(current);
                                break;
                        case ')':
                                do {
                                    c = oStack.peek();
                                    if (c != 40) {

                                        postfix += oStack.pop();
                                    }
                                } while (c != 40);

                                oStack.pop();
                                break;
                        case '*':
                        case '/':
                                do {

                                    if (oStack.peek() == 47 || oStack.peek() == 42) {

                                    postfix += oStack.pop();
                                    }
                                }
                                while (oStack.size() > 0);
                                oStack.push(current);
                                break;
                        default:
                                do {
                                    if (oStack.peek() != 40) {
                                        
                                        postfix += oStack.pop();
                                    }
                                    else {
                                        break;
                                    }
                                } while (oStack.size() > 0);

                                oStack.push(current);
                    }
                }
            }
            else {
                System.out.println("Invalid Input");
                System.exit(0);
            }
        }
    
        } catch (ArrayIndexOutOfBoundsException e) {
            
            System.out.println("Invalid Input. Program exited");
            System.exit(0);
        }
    
        for(int i = oStack.size(); i > 0; i--) {
                    
            System.out.println(oStack.peek());
            postfix = postfix + oStack.pop();
            System.out.println(postfix);
            System.out.println(i);
        }

            return postfix;
    }
    //--------------------------------------------------------------
    public int doParse()
    {
        this.translate(input);
        calcStack = new IntStack(20); // make new stack
        char ch;
        int j, num1, num2, ans = 0;
        
        try {

        for(j=0; j<postfix.length(); j++) // for each char,
        {
            ch = postfix.charAt(j); // read from input
            calcStack.displayStack(""+ch+" "); // *diagnostic*
            
            
            if (Character.isDigit(ch)) {
                
                int s = Character.getNumericValue(ch);
                calcStack.push(s);
            }

            else if (ch == '*' || ch == '+' || ch == '-' || ch == '/') {

               num1= calcStack.pop();
               num2 = calcStack.pop();
               
               switch (ch) {

                case '*':
                            ans = num2 * num1;
                            break;
                case '+':
                            ans = num2 + num1;
                            break;
                case '-':
                            ans = num2 - num1;
                            break;
                case '/':
                            ans = num2 / num1;
                            break;
               }

               calcStack.push(ans);
            }

           
        }
        } catch (ArrayIndexOutOfBoundsException e) {

            System.out.println("Invalid Input. Program exited");
            System.exit(0);
        }
        System.out.println(postfix);
        ans = calcStack.pop(); // get answer
        
        if (calcStack.size() > 0) {

            System.out.println("Invalid Input. Program exited");
            System.exit(0);
        }

        return ans;
    }
}

//END CLASS
------------------------------------------------------------------------------------------------------------------------------------


public class IntStack {
    
    private int maxSize;
    private int[] iStack;
    private int top;

    public IntStack(int size) // constructor for int stack
    {
        maxSize = size;
        iStack = new int[maxSize];
        top = 0;
    }
    //--------------------------------------------------------------
    public void push(int j) {
        
        iStack[top++] = j; 
    }
    //--------------------------------------------------------------
    public int pop() // take item from top of stack
    { 
        return iStack[--top]; 
    
    }
    //--------------------------------------------------------------
    public int peek() // peek at top of stack
    { 
        return iStack[top - 1]; 
    }
    //--------------------------------------------------------------
    public boolean isEmpty() // true if stack is empty
    { 
        return (top == 0); 
    }
    //--------------------------------------------------------------
    public boolean isFull() // true if stack is full
    {
        
        return (top - 1 == maxSize);
    }
    //--------------------------------------------------------------
    public int size() // return size
    { 
        
        return top;
    }
    //--------------------------------------------------------------
    public int peekN(int n) // peek at index n
    { 
        
        return iStack[n];
    }
    //--------------------------------------------------------------
    public void displayStack(String s)
    {
        System.out.print(s);
        System.out.print("Stack (bottom-->top): ");
        for(int j=0; j<size(); j++)
        {
            System.out.print( peekN(j) );
            System.out.print(' ');
        }
        System.out.println("");
    }
}

//END CLASS
-----------------------------------------------------------------------------------------------------------------------------------


public class CharStack {
    
    private int maxSize;
    private char[] cStack;
    private int top;

    public CharStack(int size) //constructor for char stack
    {
        maxSize = size;
        cStack = new char[maxSize];
        top = 0;
    }
    //--------------------------------------------------------------
    public void push(char c) {
        
        cStack[top++] = c; 
    }
    //--------------------------------------------------------------
    public char pop() // take item from top of stack
    { 
        return cStack[--top]; 
    
    }
    //--------------------------------------------------------------
    public char peek() // peek at top of stack
    { 
        return cStack[top - 1]; 
    }
    //--------------------------------------------------------------
    public boolean isEmpty() // true if stack is empty
    { 
        return (top == 0); 
    }
    //--------------------------------------------------------------
    public boolean isFull() // true if stack is full
    {
        
        return (top - 1 == maxSize);
    }
    //--------------------------------------------------------------
    public int size() // return size
    { 
        
        return top;
    }
    //--------------------------------------------------------------
    public int peekN(int n) // peek at index n
    { 
        
        return cStack[n];
    }
    //--------------------------------------------------------------
    public void displayStack(String s)
    {
        System.out.print(s);
        System.out.print("Stack (bottom-->top): ");
        for(int j=0; j<size(); j++)
        {
            System.out.print( peekN(j) );
            System.out.print(' ');
        }
        System.out.println("");
    }
}
//END CLASS
