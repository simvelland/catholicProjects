public class ParsePost {
    
    private IntStack calcStack;
    private CharStack oStack;
    private static String input;
    private static String postfix = "";
    //--------------------------------------------------------------
    public ParsePost(String s) {
        
        input = s;
        System.out.println(input);
    
    }

    public String translate(String s) {

        oStack = new CharStack(25);

        try {

        for(int i = 0; i < s.length(); i++) {

            System.out.println(s.length());
            char current = s.charAt(i);
            System.out.println(current);


            if (Character.isDigit(current)) {

                postfix += current;
                System.out.println(postfix);
            }
            else if (current == '*' || current == '+' || current == '-' || current == '/' || current == '(' || current == ')') {

                char c;

                if (oStack.isEmpty()) {

                    oStack.push(current);
                }
                else {
                    
                    switch (current) {

                        case '(':
                                oStack.push(current);
                                break;
                        case ')':
                                do {
                                    c = oStack.peek();
                                    if (c != 40) {

                                        postfix += oStack.pop();
                                    }
                                } while (c != 40);

                                oStack.pop();
                                break;
                        case '*':
                        case '/':
                                do {

                                    if (oStack.peek() == 47 || oStack.peek() == 42) {

                                    postfix += oStack.pop();
                                    }
                                }
                                while (oStack.size() > 0);
                                oStack.push(current);
                                break;
                        default:
                                do {
                                    if (oStack.peek() != 40) {
                                        
                                        postfix += oStack.pop();
                                    }
                                    else {
                                        break;
                                    }
                                } while (oStack.size() > 0);

                                oStack.push(current);
                    }
                }
            }
            else {
                System.out.println("Invalid Input");
                System.exit(0);
            }
        }
    
        } catch (ArrayIndexOutOfBoundsException e) {
            
            System.out.println("Invalid Input. Program exited");
            System.exit(0);
        }
    
        for(int i = oStack.size(); i > 0; i--) {
                    
            System.out.println(oStack.peek());
            postfix += oStack.pop();
            System.out.println(postfix);
            System.out.println(i);
        }

            return postfix;
    }
    //--------------------------------------------------------------
    public int doParse()
    {
        this.translate(input);
        calcStack = new IntStack(20); // make new stack
        char ch;
        int j, num1, num2, ans = 0;
        
        try {

        for(j=0; j<postfix.length(); j++) // for each char,
        {
            ch = postfix.charAt(j); // read from input
            calcStack.displayStack(""+ch+" "); // *diagnostic*
            
            
            if (Character.isDigit(ch)) {
                
                int s = Character.getNumericValue(ch);
                calcStack.push(s);
            }

            else if (ch == '*' || ch == '+' || ch == '-' || ch == '/') {

               num1= calcStack.pop();
               num2 = calcStack.pop();
               
               switch (ch) {

                case '*':
                            ans = num2 * num1;
                            break;
                case '+':
                            ans = num2 + num1;
                            break;
                case '-':
                            ans = num2 - num1;
                            break;
                case '/':
                            ans = num2 / num1;
                            break;
               }

               calcStack.push(ans);
            }

           
        }
        } catch (ArrayIndexOutOfBoundsException e) {

            System.out.println("Invalid Input. Program exited");
            System.exit(0);
        }
        System.out.println(postfix);
        ans = calcStack.pop(); // get answer
        
        if (calcStack.size() > 0) {

            System.out.println("Invalid Input. Program exited");
            System.exit(0);
        }

        return ans;
    }
}
