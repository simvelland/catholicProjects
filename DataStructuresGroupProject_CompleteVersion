import java.io.*;

public class App {
    public static void main(String[] args) throws IOException {
        String input;
        double output;
        while(true)
        {
            System.out.print("Enter infix expression: ");
            System.out.flush();
            input = getString(); // read a string from kbd
            if( input.equals("") ) // quit if [Enter]
                break;
            // make a parser
            //ParsePost aParser = new ParsePost(input);
            
            Sandbox s = new Sandbox(input);
            s.convert();
            
            output = s.doParse(); // do the evaluation
            System.out.println("Evaluates to " + output);
        } 
    }
    //--------------------------------------------------------------
    public static String getString() throws IOException
    {
        InputStreamReader isr = new InputStreamReader(System.in);
        BufferedReader br = new BufferedReader(isr);
        String s = br.readLine();
        return s;
    }
    //--------------------------------------------------------------
}

-------------------------------------------------------------------------------------------------------------------------------------------

public class CharStack {
    
    private int maxSize;
    private char[] cStack;
    private int top;

    public CharStack(int size)
    {
        maxSize = size;
        cStack = new char[maxSize];
        top = 0;
    }
    //--------------------------------------------------------------
    public void push(char c) {
        
        cStack[top++] = c; 
    }
    //--------------------------------------------------------------
    public char pop()
    { 
        return cStack[--top]; 
    
    }
    //--------------------------------------------------------------
    public char peek()
    { 
        return cStack[top - 1]; 
    }
    //--------------------------------------------------------------
    public boolean isEmpty()
    { 
        return (top == 0); 
    }
    //--------------------------------------------------------------
    public boolean isFull()
    {
        
        return (top - 1 == maxSize);
    }
    //--------------------------------------------------------------
    public int size()
    { 
        
        return top;
    }
    //--------------------------------------------------------------
    public int peekN(int n)
    { 
        
        return cStack[n];
    }
    //--------------------------------------------------------------
    public void displayStack(String s)
    {
        System.out.print(s);
        System.out.print("Stack (bottom-->top): ");
        for(int j=0; j<size(); j++)
        {
            System.out.print( peekN(j) );
            System.out.print(' ');
        }
        System.out.println("");
    }
}

------------------------------------------------------------------------------------------------------------------------------

public class Sandbox {
    
    private CharStack oStack;
    private static String input;
    private PostfixArray postfix = new PostfixArray();
    private DoubleStack calcStack;
    private String holder = "";


    public Sandbox(String s) {
        
        input = s;
        System.out.println(input);
    }

    public PostfixArray convert() {

        oStack = new CharStack(25);

        for (int i = 0; i < input.length();) {

            holder = "";

            for(int j = i; j < input.length(); j++) {

                char a = input.charAt(j);
                
                if (a != ' ' && (Character.isDigit(a) || a == '.')) {
                    
                    holder += a;
                    System.out.println(holder);
                    i++;
                }
                else if (a == '*' || a == '+' || a == '-' || a == '/' || a == '(' || a == ')' || a == '%' || a == '^') {

                    if (oStack.isEmpty()) {

                        if (postfix.isEmpty() && holder == "") {

                            oStack.push(a);
                        }

                        else if (holder == "") {

                            oStack.push(a);
                        }
                        else {

                            postfix.insert(holder);
                            oStack.push(a);
                        }
                        
                    }
                    else {

                        if (holder != "") {
                            postfix.insert(holder);
                        }
                    
                        switch (a) {

                            case '(':
                                oStack.push(a);
                                break;

                            case ')':
                                do {
                                    if (oStack.peek() != 40) {

                                        postfix.insert(String.valueOf(oStack.pop()));
                                    }
                                } while (oStack.peek() != 40);

                                oStack.pop();
                                break;

                            case '^':
                                do {
                                    if (oStack.peek() == 94) {

                                        postfix.insert(String.valueOf(oStack.pop()));
                                    }
                                    else {
                                        oStack.push(a);
                                        break;
                                    }
                                } while (oStack.peek() != 40 && oStack.size() > 0);
                                break;

                            case '*':
                            case '/':
                            case '%':
                                do {

                                    if (oStack.peek() == 47 || oStack.peek() == 42 || oStack.peek() == 37 || oStack.peek() == 94) {

                                        postfix.insert(String.valueOf(oStack.pop()));
                                    }
                                    else {
                                        oStack.push(a);
                                        break;
                                    }
                                }
                                while (oStack.size() > 0 && (oStack.peek() != 40));
                                if (oStack.size() == 0 || oStack.peek() == 40) {

                                    oStack.push(a);
                                }
                                break;

                            default:
                                do {
                                    if (oStack.peek() != 40) {
                                        
                                        postfix.insert(String.valueOf(oStack.pop()));
                                    }
                                    else {
                                        break;
                                    }
                                } while (oStack.size() > 0);

                                oStack.push(a);
                        }
                    }

                    i++;
                    break;
                }
                else {
                    
                    System.out.println("Invalid input. Program terminated.");
                    System.exit(0);
                }
                
            }

        }

        System.out.println(input.charAt(input.length() - 1));
        System.out.println(holder);
        if (holder != "" && input.charAt(input.length() - 1) != ')') {
            postfix.insert(holder);
            postfix.displayPostfix();
            System.out.println();
        }

        for(int i = oStack.size(); i > 0; i--) {
                    
            System.out.println(oStack.peek());
            postfix.insert(String.valueOf(oStack.pop()));
            postfix.displayPostfix();
            System.out.println();
            System.out.println(i);
        }
        return postfix;
    }

    public double doParse()
    {
        calcStack = new DoubleStack(20);
        String current = "";
        double num1, num2, cDE = 0, ans = 0;
        boolean isDouble;
        
        try {

        for(int j=0; j<postfix.getPostfixLength(); j++)
        {
            current = postfix.getElementAt(j);
            calcStack.displayStack(""+current+" ");
            
            try {
                
                cDE = Double.parseDouble(current);
                isDouble = true;
            } catch (NumberFormatException e) {
                
                isDouble = false;
            }
            
            if (isDouble) {
                
                calcStack.push(cDE);
            }
            else {

               num1= calcStack.pop();
               num2 = calcStack.pop();
               
               switch (current) {

                case "*":
                            ans = num2 * num1;
                            break;
                case "+":
                            ans = num2 + num1;
                            break;
                case "-":
                            ans = num2 - num1;
                            break;
                case "/":
                            ans = num2 / num1;
                            break;
                case "%":
                            ans = num2 % num1;
                            break;
                case "^":
                            ans = Math.pow(num2, num1);
                            break;

               }

               calcStack.push(ans);
            }

           
        }
        } catch (ArrayIndexOutOfBoundsException e) {

            System.out.println("Invalid Input. Program exited");
            System.exit(0);
        }
        postfix.displayPostfix();
        System.out.println();
        ans = calcStack.pop();
        
        if (calcStack.size() > 0) {

            System.out.println("Invalid Input. Program exited");
            System.exit(0);
        }

        return ans;
    }
        
}
----------------------------------------------------------------------------------------------------------------------------------

public class DoubleStack {
    
        private int maxSize;
        private double[] dStack;
        private int top;
    
        public DoubleStack(int size) // constructor for int stack
        {
            maxSize = size;
            dStack = new double[maxSize];
            top = 0;
        }
        //--------------------------------------------------------------
        public void push(double j) {
            
            dStack[top++] = j; 
        }
        //--------------------------------------------------------------
        public double pop() // take item from top of stack
        { 
            return dStack[--top]; 
        
        }
        //--------------------------------------------------------------
        public double peek() // peek at top of stack
        { 
            return dStack[top - 1]; 
        }
        //--------------------------------------------------------------
        public boolean isEmpty() // true if stack is empty
        { 
            return (top == 0); 
        }
        //--------------------------------------------------------------
        public boolean isFull() // true if stack is full
        {
            
            return (top - 1 == maxSize);
        }
        //--------------------------------------------------------------
        public int size() // return size
        { 
            
            return top;
        }
        //--------------------------------------------------------------
        public double peekN(int n) // peek at index n
        { 
            
            return dStack[n];
        }
        //--------------------------------------------------------------
        public void displayStack(String s)
        {
            System.out.print(s);
            System.out.print("Stack (bottom-->top): ");
            for(int j=0; j<size(); j++)
            {
                System.out.print( peekN(j) );
                System.out.print(' ');
            }
            System.out.println("");
        }
}
    
-----------------------------------------------------------------------------------------------------------------------------------

public class PostfixArray {
    
    private int top = 0;
    String[] pfString;

    public PostfixArray() {

        pfString = new String[100];
    }

    public void insert(String s) {

        pfString[top] = s;
        top++;
    }

    public void displayPostfix() {

        for (int i = 0; i < top; i++) {

            System.out.print(pfString[i]);
        }
    }

    public int getPostfixLength() {

        return top;
    }

    public String getElementAt(int i) {

        return pfString[i];
    }

    public boolean isEmpty()
    { 
        return (top == 0); 
    }
}
